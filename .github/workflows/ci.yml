name: ESMFIOW CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # Build configuration
  CMAKE_BUILD_TYPE: Release
  CC: gcc
  CXX: g++
  FC: gfortran
  
jobs:
  # ============================================================================
  # Code Quality and Static Analysis
  # ============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check file permissions
      run: |
        echo "Checking for executable files that shouldn't be..."
        find . -name "*.f90" -executable -type f || true
        find . -name "*.md" -executable -type f || true
        
    - name: Check line endings
      run: |
        echo "Checking for Windows line endings..."
        if find . -name "*.f90" -o -name "*.md" -o -name "*.yml" | xargs file | grep CRLF; then
          echo "ERROR: Found Windows line endings"
          exit 1
        fi
        
    - name: Check for trailing whitespace
      run: |
        echo "Checking for trailing whitespace..."
        if find . -name "*.f90" -o -name "*.md" | xargs grep -l "[[:space:]]$"; then
          echo "WARNING: Found trailing whitespace"
        fi
        
    - name: Validate YAML files
      run: |
        echo "Validating YAML syntax..."
        python3 -c "
        import yaml
        import sys
        import glob
        
        for file in glob.glob('**/*.yml', recursive=True) + glob.glob('**/*.yaml', recursive=True):
            try:
                with open(file, 'r') as f:
                    yaml.safe_load(f)
                print(f'✓ {file}')
            except Exception as e:
                print(f'✗ {file}: {e}')
                sys.exit(1)
        "

  # ============================================================================
  # Build and Test Matrix
  # ============================================================================
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        build-type: [Debug, Release]
        test-suite: [unit, integration, examples]
      fail-fast: false
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version info
        
    - name: Cache Software Stack
      uses: actions/cache@v4
      id: software-cache
      with:
        path: |
          ~/software-install
          ~/mpi-install
          ~/hdf5-install
          ~/netcdf-install
          ~/esmf-install
        key: software-stack-v2-ubuntu-latest-gfortran-${{ runner.os }}
        restore-keys: |
          software-stack-v2-ubuntu-latest-gfortran-
          
    - name: Install Base Dependencies
      run: |
        echo "Installing base build dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          gfortran \
          gcc \
          g++ \
          cmake \
          make \
          pkg-config \
          wget \
          curl \
          zlib1g-dev \
          m4 \
          flex \
          bison
          
    - name: Build Software Stack
      if: steps.software-cache.outputs.cache-hit != 'true'
      run: |
        echo "Building complete software stack from source..."
        
        # Set up environment
        export BUILD_DIR="$HOME/build"
        export MPI_DIR="$HOME/mpi-install"
        export HDF5_DIR="$HOME/hdf5-install"
        export NETCDF_DIR="$HOME/netcdf-install"
        export ESMF_DIR="$HOME/esmf-install"
        
        mkdir -p $BUILD_DIR
        cd $BUILD_DIR
        
        # ================================================================
        # Build OpenMPI
        # ================================================================
        echo "Building OpenMPI..."
        OPENMPI_VERSION="4.1.6"
        wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI_VERSION}.tar.gz
        tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz
        cd openmpi-${OPENMPI_VERSION}
        
        ./configure \
          --prefix=$MPI_DIR \
          --enable-mpi-fortran \
          --enable-shared \
          --disable-static \
          CC=gcc \
          CXX=g++ \
          FC=gfortran
        make -j$(nproc)
        make install
        
        # Update PATH and environment
        export PATH=$MPI_DIR/bin:$PATH
        export LD_LIBRARY_PATH=$MPI_DIR/lib:$LD_LIBRARY_PATH
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build HDF5
        # ================================================================
        echo "Building HDF5..."
        HDF5_VERSION="1.14.3"
        wget https://github.com/HDFGroup/hdf5/releases/download/hdf5_${HDF5_VERSION//./_}/hdf5-${HDF5_VERSION}.tar.gz
        tar -xzf hdf5-${HDF5_VERSION}.tar.gz
        cd hdf5-${HDF5_VERSION}
        
        ./configure \
          --prefix=$HDF5_DIR \
          --enable-fortran \
          --enable-parallel \
          --enable-shared \
          --disable-static \
          CC=mpicc \
          FC=mpifort
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build NetCDF-C
        # ================================================================
        echo "Building NetCDF-C..."
        NETCDF_VERSION="4.9.2"
        wget https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz
        tar -xzf v${NETCDF_VERSION}.tar.gz
        cd netcdf-c-${NETCDF_VERSION}
        
        mkdir build && cd build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$NETCDF_DIR \
          -DCMAKE_C_COMPILER=mpicc \
          -DENABLE_HDF5=ON \
          -DHDF5_ROOT=$HDF5_DIR \
          -DENABLE_PARALLEL4=ON \
          -DBUILD_SHARED_LIBS=ON \
          -DBUILD_STATIC_LIBS=OFF
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build NetCDF-Fortran
        # ================================================================
        echo "Building NetCDF-Fortran..."
        NETCDF_FORTRAN_VERSION="4.6.1"
        wget https://github.com/Unidata/netcdf-fortran/archive/v${NETCDF_FORTRAN_VERSION}.tar.gz
        tar -xzf v${NETCDF_FORTRAN_VERSION}.tar.gz
        cd netcdf-fortran-${NETCDF_FORTRAN_VERSION}
        
        # Set NetCDF environment
        export NETCDF=$NETCDF_DIR
        export LD_LIBRARY_PATH=$NETCDF_DIR/lib:$HDF5_DIR/lib:$LD_LIBRARY_PATH
        export CPPFLAGS="-I$NETCDF_DIR/include -I$HDF5_DIR/include"
        export LDFLAGS="-L$NETCDF_DIR/lib -L$HDF5_DIR/lib"
        
        ./configure \
          --prefix=$NETCDF_DIR \
          --enable-shared \
          --disable-static \
          CC=mpicc \
          FC=mpifort
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build ESMF
        # ================================================================
        echo "Building ESMF..."
        ESMF_VERSION="8.6.1"
        wget https://github.com/esmf-org/esmf/archive/v${ESMF_VERSION}.tar.gz
        tar -xzf v${ESMF_VERSION}.tar.gz
        cd esmf-${ESMF_VERSION}
        
        # Set ESMF build environment
        export ESMF_INSTALL_PREFIX=$ESMF_DIR
        export ESMF_COMM=openmpi
        export ESMF_COMPILER=gfortran
        export ESMF_NETCDF=1
        export ESMF_NETCDF_INCLUDE="$NETCDF_DIR/include"
        export ESMF_NETCDF_LIBPATH="$NETCDF_DIR/lib"
        export ESMF_HDF5=1
        export ESMF_HDF5_INCLUDE="$HDF5_DIR/include"
        export ESMF_HDF5_LIBPATH="$HDF5_DIR/lib"
        export ESMF_MPIRUN=mpirun
        
        # Build and install ESMF
        make -j$(nproc)
        make install
        
        echo "Software stack build completed!"
        
    - name: Setup Software Environment
      run: |
        # Set environment variables for subsequent steps
        export MPI_DIR="$HOME/mpi-install"
        export HDF5_DIR="$HOME/hdf5-install"  
        export NETCDF_DIR="$HOME/netcdf-install"
        export ESMF_DIR="$HOME/esmf-install"
        
        # Update PATH
        echo "$MPI_DIR/bin" >> $GITHUB_PATH
        echo "$NETCDF_DIR/bin" >> $GITHUB_PATH
        
        # Set library paths
        echo "LD_LIBRARY_PATH=$MPI_DIR/lib:$HDF5_DIR/lib:$NETCDF_DIR/lib:$ESMF_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        
        # Set compiler environment
        echo "CC=mpicc" >> $GITHUB_ENV
        echo "CXX=mpicxx" >> $GITHUB_ENV  
        echo "FC=mpifort" >> $GITHUB_ENV
        
        # Set ESMF environment
        echo "ESMFMKFILE=$ESMF_DIR/lib/libO/Linux.gfortran.64.openmpi.default/esmf.mk" >> $GITHUB_ENV
        echo "ESMF_ROOT=$ESMF_DIR" >> $GITHUB_ENV
        
        # Set NetCDF environment
        echo "NETCDF=$NETCDF_DIR" >> $GITHUB_ENV
        echo "HDF5_ROOT=$HDF5_DIR" >> $GITHUB_ENV
        
    - name: Verify Software Installation
      run: |
        echo "Verifying software stack installation..."
        
        echo "=== Compiler Versions ==="
        mpifort --version
        mpicc --version
        mpicxx --version
        cmake --version
        
        echo "=== MPI Configuration ==="
        mpirun --version
        
        echo "=== Library Versions ==="
        if [ -f "$NETCDF/bin/nc-config" ]; then
          echo "NetCDF: $($NETCDF/bin/nc-config --version)"
        fi
        
        if [ -f "$HDF5_ROOT/bin/h5dump" ]; then
          echo "HDF5: $($HDF5_ROOT/bin/h5dump --version 2>&1 | head -1)"
        fi
        
        echo "=== ESMF Configuration ==="
        if [ -f "$ESMFMKFILE" ]; then
          echo "ESMF makefile found: $ESMFMKFILE"
          head -20 "$ESMFMKFILE"
        else
          echo "ESMF makefile not found at: $ESMFMKFILE"
          find $HOME -name "esmf.mk" 2>/dev/null || echo "No esmf.mk found"
        fi
        
        echo "=== Environment Variables ==="
        echo "PATH: $PATH"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        echo "CC: $CC"
        echo "FC: $FC"
        echo "NETCDF: $NETCDF"
        
    - name: Build ESMFIOW Library
      run: |
        echo "Building ESMFIOW with ${{ matrix.build-type }} configuration..."
        
        # Create build directory
        mkdir -p build-${{ matrix.build-type }}
        cd build-${{ matrix.build-type }}
        
        # Configure with CMake
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_Fortran_COMPILER=mpifort \
          -DCMAKE_C_COMPILER=mpicc \
          -DCMAKE_CXX_COMPILER=mpicxx \
          -DESMFIOW_BUILD_TESTS=ON \
          -DESMFIOW_BUILD_EXAMPLES=ON \
          -DESMFIOW_ENABLE_PARALLEL=ON \
          -DCMAKE_INSTALL_PREFIX=$HOME/esmfiow-install \
          -DNetCDF_ROOT=$NETCDF \
          -DHDF5_ROOT=$HDF5_ROOT
          
        # Build library
        make -j$(nproc) VERBOSE=1
        
        # Install library
        make install
        
        echo "Build completed successfully!"
        ls -la $HOME/esmfiow-install/
          
    - name: Run Unit Tests
      if: matrix.test-suite == 'unit'
      run: |
        echo "Running unit tests..."
        cd build-${{ matrix.build-type }}
        
        echo 'Running unit tests...'
        ctest --output-on-failure --verbose -L unit
          
    - name: Run Integration Tests
      if: matrix.test-suite == 'integration'
      run: |
        echo "Running integration tests..."
        cd build-${{ matrix.build-type }}
        
        echo 'Running integration tests...'
        ctest --output-on-failure --verbose -L integration
        
        echo 'Running complete integration test...'
        if [ -f test/test_complete_integration ]; then
          ./test/test_complete_integration
        fi
          
    - name: Run Examples
      if: matrix.test-suite == 'examples'
      run: |
        echo "Running examples..."
        cd build-${{ matrix.build-type }}
        
        echo 'Running example programs...'
        if [ -f example/example_complete_workflow ]; then
          echo 'Running complete workflow example...'
          ./example/example_complete_workflow
          
          echo 'Checking output files...'
          ls -la *.nc* || echo 'No NetCDF files generated'
        fi
        
        if [ -f example/parallel_compression_example ]; then
          echo 'Running parallel compression example...'
          mpirun -np 2 ./example/parallel_compression_example || echo 'Parallel example failed'
        fi
          
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.build-type }}-${{ matrix.test-suite }}
        path: |
          build-${{ matrix.build-type }}/Testing/
          build-${{ matrix.build-type }}/*.nc*
          build-${{ matrix.build-type }}/*.log
        retention-days: 7
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build-type == 'Release' && matrix.test-suite == 'unit'
      with:
        name: esmfiow-build-artifacts
        path: |
          ${{ github.workspace }}/build-${{ matrix.build-type }}/lib*
          ${{ github.workspace }}/build-${{ matrix.build-type }}/bin*
          ~/esmfiow-install/
        retention-days: 30

  # ============================================================================
  # Documentation Generation
  # ============================================================================
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: Generate Documentation
      run: |
        cd doc
        doxygen Doxyfile
        
    - name: Check Documentation
      run: |
        echo "Checking generated documentation..."
        find doc/doxygen/html -name "*.html" | wc -l
        ls -la doc/doxygen/html/
        
    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: doc/doxygen/html/
        retention-days: 30

  # ============================================================================
  # Performance Benchmarks
  # ============================================================================
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Cache Software Stack
      uses: actions/cache@v4
      id: software-cache-perf
      with:
        path: |
          ~/software-install
          ~/mpi-install
          ~/hdf5-install
          ~/netcdf-install
          ~/esmf-install
        key: software-stack-v2-ubuntu-latest-gfortran-${{ runner.os }}
        restore-keys: |
          software-stack-v2-ubuntu-latest-gfortran-
      
    - name: Install Base Dependencies
      run: |
        echo "Installing base build dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          gfortran \
          gcc \
          g++ \
          cmake \
          make \
          pkg-config \
          wget \
          curl \
          zlib1g-dev \
          m4 \
          flex \
          bison
          
    - name: Build Software Stack
      if: steps.software-cache-perf.outputs.cache-hit != 'true'
      run: |
        echo "Building complete software stack from source..."
        
        # Set up environment
        export BUILD_DIR="$HOME/build"
        export MPI_DIR="$HOME/mpi-install"
        export HDF5_DIR="$HOME/hdf5-install"
        export NETCDF_DIR="$HOME/netcdf-install"
        export ESMF_DIR="$HOME/esmf-install"
        
        mkdir -p $BUILD_DIR
        cd $BUILD_DIR
        
        # ================================================================
        # Build OpenMPI
        # ================================================================
        echo "Building OpenMPI..."
        OPENMPI_VERSION="4.1.6"
        wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI_VERSION}.tar.gz
        tar -xzf openmpi-${OPENMPI_VERSION}.tar.gz
        cd openmpi-${OPENMPI_VERSION}
        
        ./configure \
          --prefix=$MPI_DIR \
          --enable-mpi-fortran \
          --enable-shared \
          --disable-static \
          CC=gcc \
          CXX=g++ \
          FC=gfortran
        make -j$(nproc)
        make install
        
        # Update PATH and environment
        export PATH=$MPI_DIR/bin:$PATH
        export LD_LIBRARY_PATH=$MPI_DIR/lib:$LD_LIBRARY_PATH
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build HDF5
        # ================================================================
        echo "Building HDF5..."
        HDF5_VERSION="1.14.3"
        wget https://github.com/HDFGroup/hdf5/releases/download/hdf5_${HDF5_VERSION//./_}/hdf5-${HDF5_VERSION}.tar.gz
        tar -xzf hdf5-${HDF5_VERSION}.tar.gz
        cd hdf5-${HDF5_VERSION}
        
        ./configure \
          --prefix=$HDF5_DIR \
          --enable-fortran \
          --enable-parallel \
          --enable-shared \
          --disable-static \
          CC=mpicc \
          FC=mpifort
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build NetCDF-C
        # ================================================================
        echo "Building NetCDF-C..."
        NETCDF_VERSION="4.9.2"
        wget https://github.com/Unidata/netcdf-c/archive/v${NETCDF_VERSION}.tar.gz
        tar -xzf v${NETCDF_VERSION}.tar.gz
        cd netcdf-c-${NETCDF_VERSION}
        
        mkdir build && cd build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$NETCDF_DIR \
          -DCMAKE_C_COMPILER=mpicc \
          -DENABLE_HDF5=ON \
          -DHDF5_ROOT=$HDF5_DIR \
          -DENABLE_PARALLEL4=ON \
          -DBUILD_SHARED_LIBS=ON \
          -DBUILD_STATIC_LIBS=OFF
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build NetCDF-Fortran
        # ================================================================
        echo "Building NetCDF-Fortran..."
        NETCDF_FORTRAN_VERSION="4.6.1"
        wget https://github.com/Unidata/netcdf-fortran/archive/v${NETCDF_FORTRAN_VERSION}.tar.gz
        tar -xzf v${NETCDF_FORTRAN_VERSION}.tar.gz
        cd netcdf-fortran-${NETCDF_FORTRAN_VERSION}
        
        # Set NetCDF environment
        export NETCDF=$NETCDF_DIR
        export LD_LIBRARY_PATH=$NETCDF_DIR/lib:$HDF5_DIR/lib:$LD_LIBRARY_PATH
        export CPPFLAGS="-I$NETCDF_DIR/include -I$HDF5_DIR/include"
        export LDFLAGS="-L$NETCDF_DIR/lib -L$HDF5_DIR/lib"
        
        ./configure \
          --prefix=$NETCDF_DIR \
          --enable-shared \
          --disable-static \
          CC=mpicc \
          FC=mpifort
        make -j$(nproc)
        make install
        
        cd $BUILD_DIR
        
        # ================================================================
        # Build ESMF
        # ================================================================
        echo "Building ESMF..."
        ESMF_VERSION="8.6.1"
        wget https://github.com/esmf-org/esmf/archive/v${ESMF_VERSION}.tar.gz
        tar -xzf v${ESMF_VERSION}.tar.gz
        cd esmf-${ESMF_VERSION}
        
        # Set ESMF build environment
        export ESMF_INSTALL_PREFIX=$ESMF_DIR
        export ESMF_COMM=openmpi
        export ESMF_COMPILER=gfortran
        export ESMF_NETCDF=1
        export ESMF_NETCDF_INCLUDE="$NETCDF_DIR/include"
        export ESMF_NETCDF_LIBPATH="$NETCDF_DIR/lib"
        export ESMF_HDF5=1
        export ESMF_HDF5_INCLUDE="$HDF5_DIR/include"
        export ESMF_HDF5_LIBPATH="$HDF5_DIR/lib"
        export ESMF_MPIRUN=mpirun
        
        # Build and install ESMF
        make -j$(nproc)
        make install
        
        echo "Software stack build completed!"
        
    - name: Setup Software Environment
      run: |
        # Set environment variables for subsequent steps
        export MPI_DIR="$HOME/mpi-install"
        export HDF5_DIR="$HOME/hdf5-install"  
        export NETCDF_DIR="$HOME/netcdf-install"
        export ESMF_DIR="$HOME/esmf-install"
        
        # Update PATH
        echo "$MPI_DIR/bin" >> $GITHUB_PATH
        echo "$NETCDF_DIR/bin" >> $GITHUB_PATH
        
        # Set library paths
        echo "LD_LIBRARY_PATH=$MPI_DIR/lib:$HDF5_DIR/lib:$NETCDF_DIR/lib:$ESMF_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        
        # Set compiler environment
        echo "CC=mpicc" >> $GITHUB_ENV
        echo "CXX=mpicxx" >> $GITHUB_ENV  
        echo "FC=mpifort" >> $GITHUB_ENV
        
        # Set ESMF environment
        echo "ESMFMKFILE=$ESMF_DIR/lib/libO/Linux.gfortran.64.openmpi.default/esmf.mk" >> $GITHUB_ENV
        echo "ESMF_ROOT=$ESMF_DIR" >> $GITHUB_ENV
        
        # Set NetCDF environment
        echo "NETCDF=$NETCDF_DIR" >> $GITHUB_ENV
        echo "HDF5_ROOT=$HDF5_DIR" >> $GITHUB_ENV
      
    - name: Run Performance Tests
      run: |
        echo "Running performance benchmarks..."
        
        # Build optimized version
        mkdir -p build-performance
        cd build-performance
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_Fortran_COMPILER=mpifort \
          -DCMAKE_C_COMPILER=mpicc \
          -DCMAKE_CXX_COMPILER=mpicxx \
          -DCMAKE_Fortran_FLAGS='-O3 -march=native' \
          -DESMFIOW_BUILD_EXAMPLES=ON \
          -DNetCDF_ROOT=$NETCDF \
          -DHDF5_ROOT=$HDF5_ROOT
          
        make -j$(nproc)
        
        # Run performance tests
        echo 'Testing compression performance...'
        time ./example/example_complete_workflow
        
        # Analyze output file
        if [ -f climate_data_compressed.nc4 ]; then
          echo 'File size analysis:'
          ls -lh climate_data_compressed.nc4
          
          echo 'NetCDF metadata:'
          ncdump -h climate_data_compressed.nc4 || echo 'ncdump not available'
        fi
          
    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          build-performance/*.nc*
          build-performance/performance-*.log
        retention-days: 7

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Release Management
  # ============================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-test, documentation, performance]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: esmfiow-build-artifacts
        path: ./release-artifacts/
        
    - name: Download Documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./documentation/
        
    - name: Create Release Package
      run: |
        echo "Creating release package..."
        cd release-artifacts
        tar -czf ../esmfiow-${GITHUB_REF#refs/tags/}.tar.gz .
        
        cd ../documentation
        tar -czf ../esmfiow-docs-${GITHUB_REF#refs/tags/}.tar.gz .
        
    - name: Generate Release Notes
      run: |
        echo "Generating release notes..."
        cat > release-notes.md << 'EOF'
        # ESMFIOW Release ${GITHUB_REF#refs/tags/}
        
        ## Features
        - Complete NetCDF4 compression pipeline with ESMF integration
        - Parallel I/O support for high-performance computing
        - CF-compliant metadata handling
        - Comprehensive field and grid operations
        
        ## Build Information
        - Built with GNU Fortran (gfortran) and GNU C/C++ compilers
        - Tested on Ubuntu 22.04 with native software stack (OpenMPI, HDF5, NetCDF, ESMF)
        - Full test suite passed
        - Optimized for performance with -O3 -march=native flags
        
        ## Installation
        Extract the release package and follow the installation guide in the documentation.
        
        ## Documentation
        Complete API documentation is available in the docs package.
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          esmfiow-*.tar.gz
        body_path: release-notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Notification and Status
  # ============================================================================
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-test, documentation]
    if: always()
    
    steps:
    - name: Determine Status
      run: |
        if [[ "${{ needs.build-test.result }}" == "success" && "${{ needs.documentation.result }}" == "success" ]]; then
          echo "STATUS=✅ SUCCESS" >> $GITHUB_ENV
          echo "MESSAGE=All CI/CD checks passed successfully!" >> $GITHUB_ENV
        else
          echo "STATUS=❌ FAILURE" >> $GITHUB_ENV
          echo "MESSAGE=Some CI/CD checks failed. Please review the logs." >> $GITHUB_ENV
        fi
        
    - name: Create Status Summary
      run: |
        cat > $GITHUB_STEP_SUMMARY << EOF
        # ESMFIOW CI/CD Pipeline Summary
        
        **Status:** $STATUS
        
        **Message:** $MESSAGE
        
        ## Job Results
        - **Code Quality:** ${{ needs.build-test.result == 'success' && 'success' || 'failed' }}
        - **Build & Test:** ${{ needs.build-test.result || 'skipped' }}  
        - **Documentation:** ${{ needs.documentation.result || 'skipped' }}
        - **Performance:** ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'included' || 'skipped' }}
        - **Security:** ${{ 'included' }}
        
        ## Artifacts
        - Build artifacts and test results are available in the Actions tab
        - Documentation is generated and available for download
        
        ## Next Steps
        - Review any failed jobs and address issues
        - Check performance results if this was a main branch push
        - Download artifacts for local testing if needed
        EOF
